/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Ui.Person;

import Model.Doctor;
import Model.DoctorDirectory;
import Model.Patient;
import Model.PatientDirectory;
import Model.Person;
import Model.PersonDirectory;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author risha
 */
public class PersonMaintainJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonMaintainJPanel
     */
    PersonDirectory persondirectory;
    DoctorDirectory doctordirectory;
    PatientDirectory patientdirectory;
    public PersonMaintainJPanel(PersonDirectory persondirectory,DoctorDirectory doctordirectory,PatientDirectory patientdirectory) {
        initComponents();
        this.persondirectory = persondirectory;
        this.doctordirectory = doctordirectory;
        this.patientdirectory = patientdirectory;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        BtnView = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblePerson = new javax.swing.JTable();
        txtPassword = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        txtAge = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSsn = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMobile = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtGender = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbleDoctorDirectory = new javax.swing.JTable();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Maintain Person Record");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        BtnView.setBackground(new java.awt.Color(204, 204, 204));
        BtnView.setText("Pull Record");
        BtnView.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        BtnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnViewActionPerformed(evt);
            }
        });

        BtnDelete.setBackground(new java.awt.Color(204, 204, 204));
        BtnDelete.setText("Delete");
        BtnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        tblePerson.setBackground(new java.awt.Color(153, 153, 153));
        tblePerson.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        tblePerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Gender", "SSN Id", "City", "State", "Community", "Mobile Number", "Email Id", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblePerson);

        jLabel12.setText("Name");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        jLabel3.setText("Gender");

        jLabel4.setText("Age");

        jLabel5.setText("SSN ID");

        jLabel6.setText("City");

        jLabel7.setText("Community");

        jLabel8.setText("State");

        jLabel9.setText("Mobile No");

        jLabel10.setText("Email");

        jLabel13.setText("Password");

        tbleDoctorDirectory.setBackground(new java.awt.Color(153, 153, 153));
        tbleDoctorDirectory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        tbleDoctorDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Gender", "Doctor ID", "City", "State", "Community", "Mobile Number", "Email Id", "Hospital Id", "Hospital Name", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbleDoctorDirectory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel7))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtCity, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSsn, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAge, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtGender, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel13))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                    .addComponent(txtMobile, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtState, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(749, 749, 749)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(505, 505, 505)
                                .addComponent(btnUpdate))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BtnView, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(199, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnView, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(txtSsn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(41, 41, 41)
                .addComponent(btnUpdate)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BtnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblePerson.getSelectedRow();

        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Please Select a row to view data");
            return;
        }
        DefaultTableModel model = (DefaultTableModel)tblePerson.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex,0);
        txtName.setText(selectedPerson.getName());
        txtSsn.setText(String.valueOf(selectedPerson.getSSN_id()));
        txtAge.setText(String.valueOf(selectedPerson.getAge()));
        txtGender.setText(selectedPerson.getGender());
        txtCity.setText(selectedPerson.getCity());
        txtState.setText(selectedPerson.getState());
        txtCommunity.setText(selectedPerson.getCommunity());
        txtMobile.setText(String.valueOf(selectedPerson.getMobile()));
        txtEmail.setText(selectedPerson.getEmail());
        txtPassword.setText(selectedPerson.getPassword());
        txtSsn.setEnabled(false);
    }//GEN-LAST:event_BtnViewActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblePerson.getSelectedRow();

        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Please Select a row to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel)tblePerson.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex,0);
        long ssn=selectedPerson.getSSN_id();
        persondirectory.deletePerson(selectedPerson);
        boolean check_doc = false;
        for(Doctor doc : doctordirectory.getDoctorDirectory())
        {
             if (String.valueOf(doc.getSSN_id()).equals(String.valueOf(ssn)))
             {
                 doctordirectory.deleteDoctor(doc);
                 check_doc = false;
                 JOptionPane.showMessageDialog(this, "Person Record deleted from directory");
                 break;
             }
             else
             {
                check_doc = true;
             }
        }
        if(check_doc == true)
        {
            JOptionPane.showMessageDialog(this, "Person Record deleted from directory");
        }
        
        boolean check = false;
        for(Patient pat : patientdirectory.getPatientDirectory())
        {
             if (String.valueOf(pat.getSSN_id()).equals(String.valueOf(ssn)))
             {
                 patientdirectory.deletePatient(pat);
                 check = false;
                 JOptionPane.showMessageDialog(this, "Person Record deleted from directory");
                 break;
             }
             else
             {
                check = true;
             }
        }
        if(check == true)
        {
            JOptionPane.showMessageDialog(this, "Person Record deleted from directory");
        }

        populateTable();

        txtName.setText("");
        txtSsn.setText("");
        txtAge.setText("");
        txtGender.setText("");
        txtCity.setText("");
        txtState.setText("");
        txtCommunity.setText("");
        txtMobile.setText("");
        txtEmail.setText("");
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblePerson.getSelectedRow();
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Please Select a row to Update");
            return; 
        }
        DefaultTableModel model = (DefaultTableModel)tblePerson.getModel();
        Person selectedPerson = (Person) model.getValueAt(tblePerson.getSelectedRow(),0);
        /*if(tbleEmphist.getSelectedRowCount()== 0)
        {
            JOptionPane.showMessageDialog(this, "Please Select a row to Update");
            return; 
        }*/
        if(tblePerson.getSelectedRowCount()== 1)
        {
          String name = txtName.getText();
          long ssn = Long.parseLong(txtSsn.getText());
          int age = Integer.parseInt(txtAge.getText());
          String gender = txtGender.getText();
          String city = txtCity.getText();
          String community = txtCommunity.getText();
          String state = txtState.getText();
          String password = txtPassword.getText();
          long mobile = Long.parseLong(txtMobile.getText());
          String email_id = txtEmail.getText();
          
          txtSsn.setEnabled(false);
          
           
//          if (!Pattern.matches("^\\d+$", txtAge.getText())) 
//         {
//             JOptionPane.showMessageDialog(null, "Age cannot be negative", "Error", JOptionPane.ERROR_MESSAGE);
//             btnUpdate.setEnabled(false);
//         }
//        else if (!Pattern.matches("^(1[89]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-5])$", txtAge.getText())) 
//         {
//             JOptionPane.showMessageDialog(null, "Age should be between 18 to 65", "Error", JOptionPane.ERROR_MESSAGE);
//             btnUpdate.setEnabled(false);
//         }
//        else if (!Pattern.matches("^^(?:male|Male|MALE|female|Female|FEMALE)$",txtGender.getText()))
//        {
//          JOptionPane.showMessageDialog(null, "Gender has to be male or female", "Error", JOptionPane.ERROR_MESSAGE);
//          btnUpdate.setEnabled(false);  
//        }
//        else if (!Pattern.matches("^[1-9]{1}[0-9]{9}", txtMobile.getText())) 
//         {
//             JOptionPane.showMessageDialog(null, "Enter valid 10 digit number", "Error", JOptionPane.ERROR_MESSAGE);
//             btnUpdate.setEnabled(false);
//         }
//        else if (!(Pattern.matches("^[a-zA-Z0-9]*+[@]{1}+[a-zA-Z0-9]*+[.]{1}+[a-zA-Z0-9]*+$", txtEmail.getText()))) {
//            JOptionPane.showMessageDialog(null, "Please enter a valid email", "Error", JOptionPane.ERROR_MESSAGE);
//            btnUpdate.setEnabled(false);
//            }
//        else {
          
          selectedPerson.setName(name);
          selectedPerson.setAge(age);
          selectedPerson.setGender(gender);
          selectedPerson.setCity(city);
          selectedPerson.setCommunity(community);
          selectedPerson.setState(state);
          selectedPerson.setPassword(password);
          selectedPerson.setMobile(mobile);
          selectedPerson.setEmail(email_id);
          boolean check = false;
          for(Doctor selectedDoctor : doctordirectory.getDoctorDirectory())
          {
              if(String.valueOf(selectedDoctor.getSSN_id()).equals(txtSsn.getText()))
              {
                        selectedDoctor.setName(name);
                        selectedDoctor.setAge(age);
                        selectedDoctor.setGender(gender);
                        selectedDoctor.setCity(city);
                        selectedDoctor.setCommunity(community);
                        selectedDoctor.setState(state);
                        selectedDoctor.setDoctor_password(password);
                        selectedDoctor.setMobile(mobile);
                        selectedDoctor.setEmail(email_id);
                        check = false;
                        break;
                }
              else
              {
                  check=true;
              }
              if(check==true)
              {
                 txtName.setText("");
              }
          }

          
          model.setValueAt(name,tblePerson.getSelectedRow(),0);
          model.setValueAt(age, tblePerson.getSelectedRow(),1);
          model.setValueAt(gender, tblePerson.getSelectedRow(),2);
          model.setValueAt(ssn, tblePerson.getSelectedRow(),3);
          model.setValueAt(city, tblePerson.getSelectedRow(),4);
          model.setValueAt(community, tblePerson.getSelectedRow(),5);
          model.setValueAt(mobile, tblePerson.getSelectedRow(),6);
          model.setValueAt(email_id, tblePerson.getSelectedRow(),7);
          model.setValueAt(password, tblePerson.getSelectedRow(),8);
          //model.setValueAt(photo, tbleEmphist.getSelectedRow(),10);
          //emphistory.updateEmployee(selectedPerson);         
          JOptionPane.showMessageDialog(this, "Person Record have been updated");
          populateTable();
            txtName.setText("");
            txtSsn.setText("");
            txtAge.setText("");
            txtGender.setText("");
            txtCity.setText("");
            txtState.setText("");
            txtCommunity.setText("");
            txtEmail.setText("");
            txtMobile.setText("");
            txtPassword.setText("");
        //}
        
        }   
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

     private void populateTable() 
    {
       DefaultTableModel model = (DefaultTableModel)tblePerson.getModel();
       model.setRowCount(0);
       
       for(Person ed : persondirectory.getPersonDirectory())
       {
           Object [] row = new Object[12];
           row[0] = ed;
           row[1] = ed.getAge();
           row[2] = ed.getGender();
           row[3] = ed.getSSN_id();
           row[4] = ed.getCity();
           row[5] = ed.getState();
           row[6] = ed.getCommunity();
           row[7] = ed.getMobile();
           row[8] = ed.getEmail();
           row[9] = ed.getPassword();
           model.addRow(row);
       }
       
       DefaultTableModel model1 = (DefaultTableModel)tbleDoctorDirectory.getModel();
       model1.setRowCount(0);
       
       for(Doctor doc : doctordirectory.getDoctorDirectory())
       {
           Object [] row = new Object[12];
           row[0] = doc;
           row[1] = doc.getAge();
           row[2] = doc.getGender();
           row[3] = doc.getSSN_id();
           row[4] = doc.getCity();
           row[5] = doc.getState();
           row[6] = doc.getCommunity();
           row[7] = doc.getMobile();
           row[8] = doc.getEmail();
           row[9] = doc.getDoctor_password();
           model.addRow(row);
       }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton BtnView;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbleDoctorDirectory;
    private javax.swing.JTable tblePerson;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtSsn;
    private javax.swing.JTextField txtState;
    // End of variables declaration//GEN-END:variables
}
